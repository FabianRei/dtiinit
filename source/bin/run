#! /bin/bash
#
# Run dtiinit Gear
# Built to flywheel-v0 spec.
#
CONTAINER="[scitran/dtiinit]"
echo -e "$CONTAINER  Initiated"

# Configure the ENV
export FSLOUTPUTTYPE=NIFTI_GZ
export LD_LIBRARY_PATH=/opt/mcr/v82/runtime/glnxa64:/opt/mcr/v82/bin/glnxa64:/opt/mcr/v82/sys/os/glnxa64:/opt/mcr/v82/sys/java/jre/glnxa64/jre/lib/amd64/native_threads:/opt/mcr/v82/sys/java/jre/glnxa64/jre/lib/amd64/server:/opt/mcr/v82/sys/java/jre/glnxa64/jre/lib/amd64:$LD_LIBRARY_PATH
export XAPPLRESDIR=/opt/mcr/v82/X11/app-defaults

# Configure paths
FLYWHEEL_BASE=/flywheel/v0
OUTPUT_DIR=$FLYWHEEL_BASE/output
INPUT_DIR=$FLYWHEEL_BASE/input
NIFTI_DIR=$INPUT_DIR/nifti
BVEC_DIR=$INPUT_DIR/bvec
BVAL_DIR=$INPUT_DIR/bval
WORK_DIR=$INPUT_DIR/work

# Ensure there is an output directory
if [[ ! -d "$OUTPUT_DIR" ]]
    then
        echo "$CONTAINER  $OUTPUT_DIR not found!"
        exit 1
fi

# Make the directories
mkdir $WORK_DIR

# Convert the config json to a dtiinit_params json file
$FLYWHEEL_BASE/parse_config.py \
    --input_file ${FLYWHEEL_BASE}/config.json \
    --output_file ${WORK_DIR}/dtiInit-params.json \
    --input_dir ${WORK_DIR} \
    --output_dir ${OUTPUT_DIR} \
    --bvec_dir ${BVEC_DIR} \
    --bval_dir ${BVAL_DIR} \
    --nifti_dir ${NIFTI_DIR}

# Make sure the params file is saved with the output
cp ${WORK_DIR}/dtiInit-params.json ${OUTPUT_DIR}

# Execute the algorithm
/usr/local/bin/dtiInit $WORK_DIR 2>&1 | tee $OUTPUT_DIR/dtiInit-log.txt

# Get a list of the files in the output directory
outputs=$(find $OUTPUT_DIR/* -maxdepth 0 -type f)

# If outputs exist, generate metadata, and exit
if [[ -z $outputs ]]
    then
        echo "$CONTAINER  No results found in output directory... Exiting"
        exit 1
    else
        cd $OUTPUT_DIR
        echo -e "$CONTAINER  Wrote: `ls`"
        echo -e "$CONTAINER  Done!"
fi

exit 0
